#!/bin/bash
# Counter Strike: Global Offensive 
# CS:GO Server Management Script
# Author: Luka Krumpak

# Server settings
servicename="csgo-server"
csgo="Counter Strike: Global Offensive"
servername=`grep -s hostname ${filesdir}/csgo/cfg/server.cfg | sed 's/hostname //g'|sed 's/"//g'`

# Directorys
rootdir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
filesdir="${rootdir}/csgo"
source "${filesdir}/csgo/cfg/launch.txt"


fn_header(){
	clear
	echo "================================="
	echo "${csgo}"
	echo "CS:GO Linux Server Installer"
	echo "by Luka Krumpak"
	echo "https://csgo.lukakrumpak.com"
	echo "================================="
	echo ""
}

# Stop script if user is root
fn_check_user(){
	if [ `whoami` = "root" ]; then
		echo -e "[\e[0;31m FAIL\e[0;39m ] Script will not run as root!"
		exit
	fi
}

# Check if file csgo server exists
fn_check_file(){
	if [ ! -e ${filesdir} ];then
		echo -e "[\e[0;31m FAIL\e[0;39m ] ${servicename}: cannot access ${filesdir}: No such directory"
		exit
	fi
}

# Status of server
fn_check_status(){
	# Check if server is running
	pidwc=`screen -ls |grep ${servicename} |awk -F . '{print $1}'|awk '{print $1}'|wc -l`
	if [ ${pidwc} -eq 1 ];then
		echo -e "[\e[0;36m INFO\e[0;39m ] ${servicename}: ${csgo} is already running"
		exit
	# Check if multiple instances are running
	elif [ ${pidwc} -ge 2 ];then
		echo -e "[\e[0;31m FAIL\e[0;39m ] ${servicename}: ${csgo} is running ${pidwc} times"
		echo -e "[\e[0;32m  OK\e[0;39m  ] ${servicename}: ${csgo} stopping all ${pidwc} instances"
		fn_server_stop
		fn_startserver
		exit
	fi
}  

# Install SteamCMD
fn_steamcmd_download(){
	echo "Installing Steam"
	echo "================================="
	cd ${rootdir}
	mkdir steamcmd
	cd steamcmd
	if [ ! -f steam.sh ];then
		wget wget https://steamcdn-a.akamaihd.net/client/installer/steamcmd_linux.tar.gz
		tar --verbose -zxf steamcmd_linux.tar.gz
		rm -v steamcmd_linux.tar.gz
		chmod +x steamcmd.sh
	else
		echo "Steam already installed!"
	fi
}


# Start Server
fn_server_start(){
	fn_check_user
	fn_check_file
	cd ${filesdir}

	# Check if a tmux server with the servicename is launched
	pidwc=`tmux ls 2>/dev/null|grep ${servicename} |awk -F . '{print $1}'|awk '{print $1}'|wc -l`
	if [ ${pidwc} -eq 0 ];then
		echo -e "[\e[0;32m  OK\e[0;39m  ] Starting ${servicename}: ${csgo}"
		#tmux sesson 
		tmux new-session -d -s ${servicename} ${filesdir}/srcds_run ${parms}
		sleep 1
	else
		echo -e "[\e[0;36m INFO\e[0;39m ] ${servicename}: ${csgo} is already running"
		exit
	fi

	# Check if a tmux server with the servicename is launched
	pidwc=`tmux ls 2>/dev/null|grep ${servicename} |awk -F . '{print $1}'|awk '{print $1}'|wc -l`
	if [ ${pidwc} -eq 0 ];then
		echo -e "[\e[0;31m FAIL\e[0;39m ] ${servicename}: ${csgo} failed to start"
	else
		echo -e "[\e[0;32m  OK\e[0;39m  ] Successfully started ${servicename}: ${csgo}"
	fi
}

fn_server_stop(){
	fn_check_user
	fn_check_file

	# Check if a tmux server with the servicename is launched
	pidwc=`tmux ls 2>/dev/null|grep ${servicename} |awk -F . '{print $1}'|awk '{print $1}'|wc -l`
	if [ ${pidwc} -eq 0 ];then
		echo -e "[\e[0;36m INFO\e[0;39m ] ${servicename}: ${csgo} is already stopped"
	else
		echo -e "[\e[0;32m  OK\e[0;39m  ] Stopping ${servicename}: ${csgo}"
		tmux kill-session -t ${servicename} > /dev/null 2>&1
	fi
}

fn_server_restart(){
	echo -e "[\e[0;32m  OK\e[0;39m  ] Restarting ${servicename}: ${csgo}"
	fn_server_stop
	sleep 1
	fn_server_start
}

fn_server_update(){
	fn_check_user
	fn_check_file

	# Check if a tmux server with the servicename is launched
	pidwc=`tmux ls 2>/dev/null|grep ${servicename} |awk -F . '{print $1}'|awk '{print $1}'|wc -l`
	if [ ${pidwc} -eq 0 ];then
		echo -e "[\e[0;32m  OK\e[0;39m  ] ${servicename}: ${csgo} is not running"
	else
		echo -e "[\e[0;36m INFO\e[0;39m ] ${servicename}: ${csgo} Still running"
		fn_server_stop
	fi

	echo -e "[\e[0;32m  OK\e[0;39m  ] Updating ${servicename}: ${csgo}"
	cd ${rootdir}
	cd steamcmd
	./steamcmd.sh +login anonymous +force_install_dir ${filesdir} +app_update ${appid} validate +quit
}

fn_server_status(){
	fn_check_user
	fn_check_file
	echo -e "[\e[0;32m  OK\e[0;39m  ] Checking ${servicename}: ${csgo}"
	fn_check_status
}

fn_server_console(){
	echo -e "[\e[0;32m  OK\e[0;39m  ] Starting Console! "
	echo -e "[\e[1;34m IMPORTANT\e[0;39m ] Press \"CTRL+b\" then \"d\" to exit console."
	echo -e "[\e[1;33m WARN\e[0;39m ] Do NOT press CTRL+c to exit."
	while true; do
		read -p "Continue? [y/n]" choice
		case $choice in
		y|Y ) break;;
		n|N ) echo Exiting; return 1 ;;
		* ) echo "Invalid. Answer 'Yes' or 'No.";;
		esac
	done

	echo -e "[\e[0;32m  OK\e[0;39m  ] Accessing console"
	pidwc=`tmux ls 2>/dev/null|grep ${servicename} |awk -F . '{print $1}'|awk '{print $1}'|wc -l`
	if [ ${pidwc} -eq 0 ];then
		echo -e "[\e[0;31m FAIL\e[0;39m ] ${servicename}: ${csgo} is not running!"
	else
		tmux attach-session -t "${servicename}"
		exit
	fi
}

# Install SteamCMD and CS:GO server
fn_install(){
	fn_check_user
	fn_header

	# Check if CS:GO server directory is installed
	if [ -d ${filesdir} ];then
		echo "${csgo} server is already installed here:"
		pwd
		while true; do
			read -p "Do you wish to continue with the installation? [y/n]" choice
			case $choice in
			y|Y ) break;;
			n|N ) echo Exiting; return 1 ;;
			* ) echo "Invalid. Answer 'Yes' or 'No.";;
			esac
		done
	fi
	fn_header

	# Confirm Installation Direcotry
	echo "Install Directory:"
	pwd
	while true; do
		read -p "Proceed with installation? [y/n]" choice
		case $choice in
		y|Y ) break;;
		n|N ) echo Exiting; return 1 ;;
		* ) echo "Invalid. Answer 'Yes' or 'No.";;
		esac
	done

# Begin SteamCMD and CS:GO Installation
	fn_header
	fn_steamcmd_download
	echo ""
	echo "Installing ${csgo} Server"
	echo "================================="
		cd ${rootdir}/steamcmd
		mkdir -v ${filesdir}
		touch install.txt
		chmod 0600 install.txt
		echo "login anonymous" > install.txt
		echo "force_install_dir ${filesdir}" >> install.txt
		echo "app_update ${appid} validate" >> install.txt
		echo "quit" >> install.txt
		STEAMEXE=steamcmd ./steamcmd.sh +runscript install.txt
		rm install.txt
	echo clear
	echo "Configuring ${csgo} Server"
	echo "================================="
		read -p "(Required) Enter rcon password: " rconpass
		read -p "(Required) Enter server name: " servername
		read -p "(Required) Enter your GSLT token: " gslt
		read -p "(Required) Enter your server IP xxx.xxx.xxx.xxx: " ip
		read -p "(Optional) Enter server password: " serverpass
		
		echo "creating server.cfg"
		touch /${filesdir}/csgo/cfg/server.cfg
		{
		echo -e "hostname \"${servername}\""
		echo -e "rcon_password \"${rconpass}\""
		echo -e "sv_password \"${serverpass}\""
		}|tee /${filesdir}/csgo/cfg/server.cfg  > /dev/null 2>&1
		echo ""
		wget  -nd -np -P ${rootdir}/lgs-config --recursive  https://raw.githubusercontent.com/lkrumpak/csgoserver/master/config/server.txt
		sed -i "s/ip=.*/ip="${ip}"/" ${rootdir}/lgs-config/server.txt
		sed -i "s/gslt=.*/gslt="${gslt}"/" ${rootdir}/lgs-config/server.txt

		hostname=`grep -s hostname /${filesdir}/csgo/cfg/server.cfg | sed 's/hostname //g'|sed 's/"//g'`
		rcon=`grep -s rcon_password /${filesdir}/csgo/cfg/server.cfg | sed 's/rcon_password //g'|sed 's/"//g'`
		echo "${csgo} Server Details"
		echo "================================="
		echo "Server hostname: ${hostname}"
		echo "Rcon password: ${rcon}"
		echo "You can edit these in server.cfg:"
		echo "${filesdir}/csgo/cfg/server.cfg"
		echo ""
		echo "================================="
		echo "Install Complete!"
		echo ""
		echo "To start server type:"
		echo "./csgoserver start"
	}

case "$1" in

	install)
		fn_install;;
	start)
		fn_server_start;;
	stop)
		fn_server_stop;;
	restart)
		fn_server_restart;;
	update)
		fn_server_update;;
	status)
		fn_server_status;;
	console)
		fn_server_console;;
	*)
		echo "Usage: $0 {start|stop|restart|update|status|install|console}"
		exit 1;;
esac
exit
