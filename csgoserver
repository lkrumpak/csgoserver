#!/bin/bash
# Counter Strike: Global Offensive 
# CS:GO Server Management Script
# Author: Luka Krumpak

# Server settings
servicename="csgo-server"
gamename="Counter Strike: Global Offensive"
servername="name"

# Steam Login
steamuser="anonymous"
steampwd=""

# Directorys
rootdir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
filesdir="${rootdir}/serverfiles"
source "${rootdir}/lgs-config/server.txt"

fn_header(){
	clear
	echo "================================="
	echo "${gamename}"
	echo "Linux Server Installer"
	echo "By: Luka Krumpak"
	echo "================================="
	echo ""
}

# [ FAIL ]
fn_printfail(){
    echo -e "\r\033[K[\e[0;31m FAIL \e[0;39m] $@"
}

# [  OK  ]
fn_printok(){
    echo -e "\r\033[K[\e[0;32m  OK  \e[0;39m] $@"
}

# [ INFO ]
fn_printinfo(){
    echo -e "\r\033[K[\e[0;36m INFO \e[0;39m] $@"
}

# [ WARN ]
fn_printwarn(){
	echo -e "\r\033[K[\e[1;33m WARN \e[0;39m] $@"
}

# [ .... ]
fn_printdots(){
    echo -en "\r\033[K[ .... ] $@"
}

# Stop script if user is root
fn_check_user(){
	if [ `whoami` = "root" ]; then
		fn_printfail "Script will not run as root!"
		exit
	fi
}

fn_check_serverconfig(){
	FILE=${filesdir}/csgo/cfg/server.cfg
	if [ ! -f "$FILE" ]; then
		fn_printfail "${servicename}: cannot access ${FILE}: No such directory"
		exit
	else
	fn_printok "Creating server.cfg"
	fi
}

fn_check_lgsconfig(){
	FILE=${rootdir}/lgs-config/server.txt
	if [ ! -f "$FILE" ]; then
		fn_printfail "${servicename}: cannot access ${FILE}: No such directory"
		exit
	else
	fn_printok "Created lgs-config/server.txt"
	fi
}

fn_install_steam(){
	fn_header
	echo "Installing SteamCMD"
	echo ""
	echo "================================="
	cd "${rootdir}"
	mkdir -pv "steamcmd"
	sleep 1
	cd "steamcmd"
	if [ ! -f steamcmd.sh ]; then
		wget -nv -N https://steamcdn-a.akamaihd.net/client/installer/steamcmd_linux.tar.gz
		tar --verbose -zxf steamcmd_linux.tar.gz
		rm -v steamcmd_linux.tar.gz
		chmod +x steamcmd.sh
		sleep 1
	else
		echo ""
		echo "Steam already installed!"
	fi
	sleep 1
	echo ""
}

fn_install_csgo(){
	fn_header
	echo "Installing ${gamename} Server"
	echo ""
	echo "================================="
	cd ${rootdir}/steamcmd
	mkdir -pv "${filesdir}"
	STEAMEXE=steamcmd ./steamcmd.sh +login "anonymous" "" +force_install_dir "${filesdir}" +app_update 740 validate +quit
	echo ""
	echo "================================="
	while true; do
		read -p "Was the install successful? [y/N]" yn
		case $yn in
		[Yy]* ) break;;
		[Nn]* ) fn_retryinstall;;
		* ) echo "Please answer yes or no.";;
		esac
	done
	echo ""
}

fn_autoip(){
# Identifies the server interface IP
# If multiple interfaces this will need to be set manually
getip=$(ip -o -4 addr|awk '{print $4 }'|grep -oe '\([0-9]\{1,3\}\.\?\)\{4\}'|grep -v 127.0.0)
getipwc=$(ip -o -4 addr|awk '{print $4 }'|grep -oe '\([0-9]\{1,3\}\.\?\)\{4\}'|grep -v 127.0.0|wc -l)
if [ "${ip}" == "0.0.0.0" ]||[ "${ip}" == "" ]; then
	if [ "${getipwc}" -ge "2" ]; then
		fn_printwarn "Multiple active network interfaces.\n\n"
		echo -en "Manually specify the IP you want to use within the ${selfname} script.\n"
		echo -en "Set ip=\"0.0.0.0\" to one of the following:\n"
		echo -en "${getip}\n"
		exit
	else
		ip="${getip}"
	fi
fi
}

fn_install(){
	fn_check_user
	fn_header

	# Check if CS:GO server directory is installed
	if [ -d ${filesdir} ];then
		echo "${gamename} server is already installed here:"
		pwd
		while true; do
			read -p "Do you wish to continue with the installation? [y/n]" choice
			case $choice in
			y|Y ) fn_header; break;;
			n|N ) echo Exiting; return 1 ;;
			* ) echo "Invalid. Answer 'Yes' or 'No.";;
			esac
		done
	fi

	# Confirm Installation Direcotry
	echo "Install Directory:"
	pwd
	while true; do
		read -p "Proceed with installation? [y/n]" choice
		case $choice in
		y|Y ) break;;
		n|N ) echo Exiting; return 1 ;;
		* ) echo "Invalid. Answer 'Yes' or 'No.";;
		esac
	done

	# SteamCMD and CS:GO Installation
	# fn_install_steam
	# fn_install_csgo

	# setup server
	fn_header
	echo -e "\e[0;36mConfiguring\e[0;39m ${gameserver} Server"
	echo ""
	echo "================================="

	read -p " Enter rcon password: " rconpass
	read -p " Enter your GSLT token: " gslt

	fn_printdots "Creating server.cfg"
	sleep 1
	touch /${filesdir}/csgo/cfg/server.cfg
	{
		echo -e "hostname \"${servername}\""
		echo -e "rcon_password \"${rconpass}\""
		echo -e "sv_password \"${serverpass}\""
	}|tee /${filesdir}/csgo/cfg/server.cfg  > /dev/null 2>&1
	
	fn_check_serverconfig
	fn_autoip
	fn_printdots "Creating server.cfg"
	sleep 1
	if [ ! -f "${rootdir}/lgs-config/server.txt" ]; then
		wget -q -nd -np -P ${rootdir}/lgs-config --recursive  https://raw.githubusercontent.com/lkrumpak/csgoserver/master/config/server.txt
	fi
	sed -i "s/ip=.*/ip="${ip}"/" ${rootdir}/lgs-config/server.txt
	sed -i "s/gslt=.*/gslt="${gslt}"/" ${rootdir}/lgs-config/server.txt
	fn_check_lgsconfig
	
	fn_header
	echo "${gamename} Server Details"
	echo "================================="
		echo ""
		echo -e "Server hostname:\e[0;36m ${servername}\e[0;39m"
		echo -e "Server IP:\e[0;36m ${ip}\e[0;39m"
		echo -e "Rcon password:\e[0;36m ${rconpass}\e[0;39m"
		echo ""
		echo "You can edit these server details at:"
		echo ""
		echo "${filesdir}/csgo/cfg/server.cfg"
		echo "${rootdir}/lgs-config/server.txt"
		echo ""
	echo "================================="
	echo "Installation Complete!"
	echo "================================="
		echo ""
		echo "Usage: $0 {start|stop|restart|update|status|install|console}"
}

fn_server_start(){
	fn_check_user
	cd ${filesdir}
	# Check if a tmux server with the servicename is launched
	pidwc=`tmux ls 2>/dev/null|grep ${servicename} |awk -F . '{print $1}'|awk '{print $1}'|wc -l`
	if [ ${pidwc} -eq 0 ];then
		fn_printdots "Starting ${servicename}: ${gamename}"

		#tmux sesson 
		tmux new-session -d -s ${servicename} ${filesdir}/srcds_run ${parms}
		sleep 1
	else
		fn_printfail "${servicename}: ${gamename} is already running"
		exit
	fi

	# Check if a tmux server with the servicename is launched
	pidwc=`tmux ls 2>/dev/null|grep ${servicename} |awk -F . '{print $1}'|awk '{print $1}'|wc -l`
	if [ ${pidwc} -eq 0 ];then
		fn_printfail "${servicename}: ${gamename} failed to start"
	else
		fn_printok "Successfully started ${servicename}: ${gamename}"
	fi 
}

fn_server_stop(){
	fn_check_user

	# Check if a tmux server with the servicename is launched
	pidwc=`tmux ls 2>/dev/null|grep ${servicename} |awk -F . '{print $1}'|awk '{print $1}'|wc -l`
	fn_printdots "Stopping ${servicename}: ${gamename}"
	sleep 1
	if [ ${pidwc} -eq 0 ];then
		fn_printwarn "${servicename}: ${gamename} is already stopped"
	else
		fn_printok "Stopping ${servicename}: ${csgo}"
		tmux kill-session -t ${servicename} > /dev/null 2>&1
	fi
}


fn_server_update(){
	fn_check_user
	fn_printdots "Checking server status"
	sleep 1
	# Check if a tmux server with the servicename is launched
	pidwc=`tmux ls 2>/dev/null|grep ${servicename} |awk -F . '{print $1}'|awk '{print $1}'|wc -l`
	if [ ${pidwc} -eq 0 ];then
		fn_printok "${servicename}: ${gamename} is not running"
	else
		fn_printinfo "${servicename}: ${gamename} is still running"
		fn_server_stop
	fi

	fn_printok "Updating ${servicename}: ${gamename}"
	cd ${rootdir}
	cd steamcmd
	./steamcmd.sh +login anonymous +force_install_dir ${filesdir} +app_update ${appid} validate +quit
}

fn_server_console(){
	fn_printok "Starting Console! "
	fn_printinfo "Press \"CTRL+b\" then \"d\" to exit console."
	fn_printwarn "Do NOT press CTRL+c to exit."
	while true; do
		read -p "Continue? [y/n]" choice
		case $choice in
		y|Y ) break;;
		n|N ) echo Exiting; return 1 ;;
		* ) echo "Invalid. Answer 'Yes' or 'No.";;
		esac
	done

	fn_printdots "Accessing console"
	pidwc=`tmux ls 2>/dev/null|grep ${servicename} |awk -F . '{print $1}'|awk '{print $1}'|wc -l`
	if [ ${pidwc} -eq 0 ];then
		fn_printfail "${servicename}: ${gamename} is not running!"
	else
		fn_printok "Accessing console"
		tmux attach-session -t "${servicename}"
		exit
	fi
}

case "$1" in

	install)
		fn_install;;
	start)
		fn_server_start;;
	stop)
		fn_server_stop;;
	restart)
		fn_server_stop
		fn_server_start;;
	update)
		fn_server_update;;
	console)
		fn_server_console;;
	*)
		echo "Usage: $0 {start|stop|restart|update|install|console}"
		exit 1;;
esac




